{"version":3,"sources":["components/Card.js","components/cardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","props","name","email","id","className","src","alt","CardList","robots","map","user","i","key","SearchBox","searchflied","searchChange","type","placeholder","onChange","style","width","Scroll","overflowY","borderTop","height","marginTop","paddingTop","margin","children","ErrorBoundary","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","searchfield","target","value","found","fetch","then","response","json","users","filteredRobots","filter","robot","toLowerCase","includes","length","lineHeight","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2OAgBeA,EAbF,SAACC,GAAW,IACdC,EAAmBD,EAAnBC,KAAMC,EAAaF,EAAbE,MAAOC,EAAMH,EAANG,GACpB,OACI,yBAAKC,UAAU,uDACX,6BACI,yBAAKC,IAAG,+BAA0BF,EAA1B,iBAA6CG,IAAI,UACzD,4BAAKL,GACL,2BAAIC,MCiBLK,EApBE,SAAC,GAAc,IAAbC,EAAY,EAAZA,OAEf,OACI,6BAEIA,EAAOC,KAAK,SAACC,EAAMC,GAChB,OACG,kBAAC,EAAD,CACEC,IAAKD,EACLR,GAAIO,EAAKP,GACTF,KAAMS,EAAKT,KACXC,MAAOQ,EAAKR,aCFjBW,EAdG,SAAC,GAAgC,EAA/BC,YAAgC,IAAnBC,EAAkB,EAAlBA,aAC7B,OACI,yBAAKX,UAAU,OACX,2BACEA,UAAU,mCACVY,KAAK,SACLC,YAAY,gBACZC,SAAUH,EACVI,MAAO,CAACC,MAAO,aCadC,G,MArBA,SAACrB,GAGZ,OACI,yBAAKmB,MAAO,CACRG,UAAW,SACXC,UAAW,oBACXC,OAAO,QACPC,UAAW,OACXC,WAAY,SAEf,yBAAKP,MAAO,CACRC,MAAO,MACPO,OAAQ,WAER3B,EAAM4B,aCOJC,E,YArBX,WAAY7B,GAAQ,IAAD,8BACf,4CAAMA,KACD8B,MAAQ,CACTC,UAAU,GAHC,E,+EAODC,EAAOC,GACrBC,KAAKC,SAAS,CAACJ,UAAU,M,+BAIzB,OAAIG,KAAKJ,MAAMC,SACJ,wDAEJG,KAAKlC,MAAM4B,a,GAhBEQ,aCuEbC,E,YA5DX,aAAc,IAAD,8BAET,+CAqBJC,eAAiB,SAAAC,GACb,EAAKJ,SAAS,CAACK,YAAaD,EAAME,OAAOC,SArBzC,EAAKZ,MAAQ,CACTtB,OAAQ,GACRgC,YAAa,GACbG,OAAO,GANF,E,iFAWQ,IAAD,OAGhBC,MAAM,8CACHC,MAAM,SAAAC,GACH,OAAOA,EAASC,UAEnBF,MAAK,SAAAG,GACF,EAAKb,SAAS,CAAC3B,OAAQwC,S,+BAQtB,IAAD,EACyBd,KAAKJ,MAA5BtB,EADF,EACEA,OAAQgC,EADV,EACUA,YACTS,EAAiBzC,EAAO0C,QAAO,SAACC,EAAOxC,GACzC,OAAOwC,EAAMlD,KAAKmD,cAAcC,SAASb,EAAYY,kBAIzD,OAAsB,IAAlB5C,EAAO8C,OAEH,yBAAKnC,MAAO,CAACK,OAAQ,QAAS+B,WAAY,UACtC,wBAAInD,UAAU,MAAd,eAMP,yBAAKA,UAAU,MACb,wBAAIA,UAAU,UAAd,eACA,kBAAC,EAAD,CAAWW,aAAcmB,KAAKI,iBAC9B,kBAAC,EAAD,KACI,kBAAC,EAAD,KACI,kBAAC,EAAD,CAAU9B,OAASyC,W,GApDxBb,a,MCGCoB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MACAC,SAASC,eAAe,SD2HlC,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMtB,MAAK,SAAAuB,GACjCA,EAAaC,iB","file":"static/js/main.7d4322aa.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n//https://robohash.org/ for random images\r\nconst Card = (props) => {\r\n    const {name, email, id} = props;\r\n    return (\r\n        <div className='bg-light-green tc br3 dib pa3 ma2 bw2 shadow-5 grow'>\r\n            <div>\r\n                <img src={`https://robohash.org/${id}?size=150x150`} alt=\"robot\" />\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>   \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\n// we use {robots} to destructure props.robots\r\n/* Carlist  is called 'pure component' cause it's a pure function.\r\nIt receives an input and then, it always returns the same output.\r\nTHERE ARE NO CHANGE OF THE STATE */\r\nconst CardList = ({robots}) => {\r\n\r\n    return (\r\n        <div>\r\n            {\r\n            robots.map ((user, i) => {\r\n               return (\r\n                  <Card \r\n                    key={i}\r\n                    id={user.id}\r\n                    name={user.name}\r\n                    email={user.email}\r\n                   />\r\n               )\r\n            })\r\n    }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({searchflied, searchChange}) => {\r\n    return (\r\n        <div className=\"pa2\">\r\n            <input \r\n              className=\"pa3 ba b--green bg-lightest-blue\"\r\n              type=\"search\" \r\n              placeholder=\"Search robots\"\r\n              onChange={searchChange}\r\n              style={{width: '400px'}}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n // after pros ans state let buil a children\r\nconst Scroll = (props)=> {\r\n\r\n    // children is a prop that React has\r\n    return (\r\n        <div style={{\r\n            overflowY: 'scroll',\r\n            borderTop: '1px solid #0ccac4',\r\n            height:'600px',\r\n            marginTop: '50px',\r\n            paddingTop: '50px'\r\n         }}>\r\n         <div style={{\r\n             width: '75%',\r\n             margin: '0 auto'\r\n             }}>\r\n            {props.children}\r\n         </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Scroll;","import React, {Component} from 'react';\r\n\r\nclass ErrorBoundary extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            hasError: false\r\n        }\r\n    }\r\n\r\n    componentDidCatch(error, info){\r\n        this.setState({hasError: true})\r\n    }\r\n\r\n    render(){\r\n        if (this.state.hasError) {\r\n            return <h1>Ooooops. That's not good</h1>\r\n        }\r\n        return this.props.children; \r\n        // children will everything that's between our class\r\n    }\r\n}\r\n\r\n\r\nexport default ErrorBoundary;","\r\nimport React, { Component } from 'react';\r\nimport Cardlist from '../components/cardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport './App.css'\r\nimport Scroll from '../components/Scroll'\r\nimport ErrorBoundary from '../components/ErrorBoundary'\r\n\r\n // Components that use state are called smart components\r\nclass App  extends Component {\r\n    // Create the state\r\n    // Mounting\r\n    //1.initialize the robots\r\n    constructor(){\r\n        // We need to write super() before we use: this\r\n        super()\r\n        this.state = {\r\n            robots: [],\r\n            searchfield: '', \r\n            found: false\r\n        };\r\n    }\r\n  \r\n    //2. Update the robots through an API\r\n    componentDidMount() {\r\n        //to call our api\r\n        // fetch is a method that allow us to make request to the server\r\n        fetch('https://jsonplaceholder.typicode.com/users')\r\n          .then( response => {\r\n              return response.json();\r\n          })\r\n          .then(users => {\r\n              this.setState({robots: users})\r\n          })\r\n    }\r\n\r\n    onSearchChange = event => {\r\n        this.setState({searchfield: event.target.value})\r\n    }\r\n\r\n     render() {\r\n         const {robots, searchfield} = this.state;\r\n         const filteredRobots = robots.filter((robot, i) =>{\r\n             return robot.name.toLowerCase().includes(searchfield.toLowerCase());\r\n        });\r\n       \r\n         // robots.length === 0 is the same of !robots.length\r\n         if (robots.length === 0) {\r\n             return (\r\n                 <div style={{height: '800px', lineHeight: '800px'}}>\r\n                     <h1 className=\"tc\">Loading...</h1>\r\n                 </div>\r\n             )\r\n         } else {\r\n             \r\n             return (\r\n              <div className=\"tc\">\r\n                <h1 className=\"f1 ma5\">RoboFriends</h1>\r\n                <SearchBox searchChange={this.onSearchChange}/>\r\n                <Scroll>\r\n                    <ErrorBoundary>\r\n                        <Cardlist robots={ filteredRobots } /> \r\n                    </ErrorBoundary>\r\n                    \r\n                </Scroll>\r\n                \r\n              </div>    \r\n             );\r\n         } \r\n         \r\n     }\r\n}\r\n\r\nexport default App;\r\n\r\n/* NOTE: if, in the terminal, we run: npm run build, this will\r\ncreate a new folder called 'build' with all our files optimized, \r\nminified, and ready to be deployed in the internet*/","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'tachyons';\nimport App from './containers/App';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />,\n                document.getElementById('root')\n                );\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}